---
# global non-agora related configuration variables
params:
  # Sometimes services like supervisor take quite a while to restart and some
  # others don't. Configure here exactly how many seconds it should wait for
  # processes that restart slowly or and those that are fast.
  sleep:
    fast: 2
    slow: 15

# global configuration
config:
  backup_password: '<PASSWORD>'

  # global config. Note: currently some other keys are used as global conf
  global_secret_key: '<PASSWORD>'
  cloudflare: false

  host: agoravoting.com

  # election-orchestra
  port: 5000
  public_ipaddress: 192.168.0.11
  private_ipaddress: 192.168.50.4
  vfork_server_ports: [4081, 4083]
  vfork_hint_server_ports: [8081, 8083]
  eorchestra_password: '<PASSWORD>'
  auto_mode: true

  # some java related configuration options
  java:
    # maximum size of heap memory in Megabytes (int). Default: 4000. Your total
    # RAM + SWAP needs to be bigger than this. If you are going to do very
    # big tallies (hundred of thousands of votes or millions), you will need to
    # change this to something bigger.
    max_heap_memory_usage: 4000

  # agora-elections
  agora_elections:
    db_password: '<PASSWORD>'
    shared_secret: '<PASSWORD>'
    expiry: 60000
    domain: agoravoting.com
    port: 14443

    # Password used to encrypt the authorities' public keys for usage in
    # agora-elections.
    keystore_pass: '<PASSWORD>'

  # agora-gui
  agora_gui:
    domain: agoravoting.com
    admin_port: 10090
    booth_port: 10091
    elections_port: 10092

    # These are variables that go to the /home/agoragui/avConfig.js configuration
    # file. See the file for more details.
    language: en
    defaultRoute: /admin/login
    debug: 'false'

    contact:
      email: contact@example.com
      twitter: ''
      tlf: ''

  # configuration related to the nginx web server
  webserver:
    # configures the "worker_processes" setting in nginx. Typically you would
    # use the number of cores of the machine or less.
    worker_processes: 2

    # enable/disable nginx reverse proxy cache for everything related to agora
    # web server
    reverse_proxy_cache: true

  # DNI-e and FNMT authentication support related configuration
  dnie_auth:
    # boolean (true|false) that enables or disables the DNIe and FNMT
    # authentication.
    #
    # Note: load_balancing is not currently supported when dni_auth is enabled
    # because nginx for some reason always will request the client TLS
    # certificate if the requester hostname doesn't match the nginx hostname.
    allow: false

    # Nginx requires a different FQDN to apply client side authentication,
    # which is something needed for DNIe and FNMT auth.
    host: cert.agora-auth5

  cert:
    C: EN
    ST: Ney York
    L: Ney York
    O: Example
    OU: Example
    EMAIL: info@example.com

  # sentry
  sentry:
    port: 9090
    admin_user: 'admin@example.com'
    db_password: '<PASSWORD>'
    admin_password: '<PASSWORD>'

    # Sending the code sms and email log to an email
    msg_log: False

    # the log receiver
    msg_log_email: log@example.com


  # administration interface settings
  authapi:
    # configuration of the log sender
    server_email: log@example.com

    # Election ids are autoinc integer numbers set when created from the
    # administrative web interface. This settings allows to specify the start
    # number of the election ids. This might be useful to set if you want to
    # them to start at a specific rate for any reason, for example if the
    # authorities are shared with other authapi servers.
    election_start_id: 1

    # stablishes if admins can register or not
    # default value: 'open'
    # allowed values: 'close', 'open'
    admin_census_mode: open

    admin_email: 'admin@agoravoting.com'
    admin_password: 'QWERTY33'

    # sms configuration
    sms:
      # enable sms configuration. if set to false, the sms configuration doesn't
      # get inserted in the deploy.py config file.
      # allowed values: true|false
      enabled: false

      # sms provider
      # allowed values: esendex
      sms_provider: esendex

      # Each user might have different domain ids. This settings depends on
      # the provider.
      domain_id: '<DOMAIND>'

      # Provider's user name.
      login: '<LOGIN>'

      # Provider's password.
      password: '<PASSWORD>'

      # Base URL of the API of the provider. Depends on the provider, the
      # default works for esendex.
      url: 'https://api.esendex.com/v1.0/messagedispatcher'

      # Depends on the provider. Allows you to change the sender id.
      sender_id: 'agoravoting'

      # Voice lang code. Only for esendex. Default: None.
      voice_lang_code: None

      # Base template for sms messages. The %s will be replaced by the
      # message, so you can add prefix and suffixes. Watch the size of the
      # template: sms messages are limited to 140 characters.
      base_template: "__MESSAGE__ -- Agora Voting"

    # email configuration
    email:
      # enable email configuration. if set to false, the emailconfiguration
      # doesn't get inserted in the deploy.py config file.
      # allowed values: true|false
      enabled: false

      # The sender email address
      default_from_email: 'agora@example.com'

      # Email server host
      email_host: 'example.com'

      # Email server port
      email_port: 24

      # Base template for plain text email messages. The __MESSAGE__ will be
      # replaced by the message, so you can add prefix and suffixes.
      base_template: "__MESSAGE__\n\n -- Agora Voting https://agoravoting.com"

  # Authorities
  authorities:
    - id: "auth1"
      name: "Agora Voting 1"
      description: "Agora Voting es un software libre de votaciones que permite a cualquier organización realizar procesos electorales de forma segura, flexible, transparente y a un precio competitivo."
      url: "https://agoravoting.com"
      image: "/docs/logo_agora.png"
    - id: "auth2"
      name: "Agora Voting 2"
      description: "Agora Voting es un software libre de votaciones que permite a cualquier organización realizar procesos electorales de forma segura, flexible, transparente y a un precio competitivo."
      url: "https://agoravoting.com"
      image: "/docs/logo_agora.png"
  director: 'auth1'
  auths: "['auth2']"

  # set to true if the environment where you are going to deploy the machine,
  # it uses an https_proxy, which is not transparently supported in ansible.
  has_https_proxy: false

  # populates the /etc/hosts file. Sometimes this is needed, for example when
  # deploying with vagrant, the name of other machines might not be
  # automatically known by others, for example the name of the master might not
  # be known by the slave machine.
  hosts: []
  #  - hostname: agora-auth5
  #    ip: 192.168.50.4

  #
  # Load Balancing & High Availability configuration details
  #
  load_balancing:
    # set to true if you want to enable load_balancing. Basically this affects
    # to oneserver.conf configuration
    enabled: false

    # set is_master to "true" if the machine will be the master server,
    # set to "false" if it's going to act as a slave (with a hot standby
    # postgresql database configuration)
    is_master: true

    # Id of the node. Both master and slaves require to have a unique id.
    # This is used by repmgr.
    repmgr_node_id: 1

    # The CIDR address of the load balancer. This is used in the nginx
    # configuration of oneserver.conf
    loadbalancers_cidr: '192.168.0.11/0'

    # The header used by the load balancer to communicate the real ip of the
    # user.
    load_balancer_real_ip_header: 'X-Real-IP'

    # set to 'true' if the load balancer will access to this machines using
    # TLS (which is more secure but slower).
    use_https: false

    # Configuration needed when the machine is configured to be a slave i.e.
    # 'is_master' is set to 'false'
    slave:
      # hostname of the master. Used to:
      # - connect via rsync
      # - connect via postgresql
      master_hostname: 'localhost'

      # specifies the update frequency of the rsync of dirs from master.
      # rsync is done of /etc/eopeers/ and /home/agoraelections/datastore
      rsync_update_secs: 600

    # Configuration needed when the machine is configured to be a master i.e.
    # 'is_master' is set to 'true'
    master:
      # The list of keys in here will be accepted  to login as agoraelections.
      # This is used for rsync synchronization.
      #
      # The ssh key you need to put here can be found in the file
      # /home/agoraelections/.ssh/id_rsa.pub in the slave machines.
      slave_agoraelections_ssh_keys:
        - 'ssh-rsa whatever ansible-generated'

      # The list of keys in here will be accepted  to login as agoraelections.
      # This is used for rsync synchronization.
      #
      # The ssh key you need to put here can be found in the file
      # /var/lib/postgresql/.ssh/id_rsa.pub in the slave machines.
      slave_postgres_ssh_keys:
        - 'ssh-rsa whatever ansible-generated'

      # CIDR block address slaves' used to specify:
      #  - which machines can access to postgresql
      slave_cidr_address: '192.168.0.11/24'
