db.default.url="jdbc:postgresql://{{ config.load_balancing.slave.master_hostname if not config.load_balancing.is_master else 'localhost' }}:5432/agora_elections"
db.default.driver="org.postgresql.Driver"
db.default.user=agora_elections
db.default.pass={{config.agora_elections.db_password}}

app.datastore.public="/home/agoraelections/datastore/public"
app.datastore.private="/home/agoraelections/datastore/private"
applyEvolutions.default=true

app.api.root="http://{{config.agora_elections.domain}}:{{config.agora_elections.port}}"
app.datastore.root="http://{{config.agora_elections.domain}}:{{config.agora_elections.port}}"
app.datastore.ssl_root="https://{{config.agora_elections.domain}}:{{config.agora_elections.ssl_port}}"

app.api.max_revotes={{config.agora_elections.max_revotes}}

# In big elections memory or disk buffer might need to be increased,
# specifically to upload the list of valid voterids if any filtering is going
# to be made, or when uploading the list of electors. This setting is
# applied at once to:
# play.http.parser.maxDiskBuffer (in agora-elections config)
# play.http.parser.maxMemoryBuffer (in agora-elections config)
# client_max_body_size (in nginx)
play.http.parser.maxMemoryBuffer = {{config.http.max_body_size}}
play.http.parser.maxDiskBuffer = {{config.http.max_body_size}}

app.partial-tallies=false

# agora-results can specify the pipelines whitelist
app.agoraResults.pipesWhitelist="/home/agoraelections/agora-elections/conf/pipes_whitelist"

# Generic election related constraints that apply to multiple parts of
# the deployment, for example the same limit might apply to authapi,
#agora-gui and agora-elections
election.limits {
  # maximum number of questions allowed in an election
  maxNumQuestions={{config.election_limits.max_num_questions}},

  # maximum number of allowed possible answers in a question
  maxNumAnswers={{config.election_limits.max_num_answers}},

  # maximum size in characters of long strings like url titles
  maxShortStringLength={{config.election_limits.max_short_string_length}},

  # maximum size in characters of long strings like question description
  maxLongStringLength={{config.election_limits.max_long_string_length}}
}

# When this setting is true, an election can be virtual and have
# subelections. A virtual election can have no votes itself and can move
# directly from created to calculated results state and the results
# calculation include the tallies of the subelections, so it can be used
# to consolide election results.
#
# Virtual elections have currently one limitation: ownership of the
# subelections is not checked, and that is why support for virtual elections
# is disabled by default and should only be enabled in dedicated
# installations.
election.virtualElectionsAllowed={{config.agora_elections.virtualElectionsAllowed}}

app.authorities = {
{% for auth in config.authorities %}

  {{ auth.id }} = {
    name = "{{ auth.name }}",
    description = "{{ auth.description }}",
    url = "{{ auth.url }}",
    image = "{{ auth.image }}"
  }{% if not loop.last %},{% endif %}
{% endfor %}

}

app.eopeers.dir=/etc/eopeers/

booth.auth.secret={{config.agora_elections.shared_secret}}
booth.auth.expiry={{config.agora_elections.expiry}}

ws.ssl {
  loose.disableHostnameVerification=true
  keyManager = {
    stores = [
      { type = "JKS", path = "/home/agoraelections/keystore.jks", password = "{{ config.agora_elections.keystore_pass }}" }
    ]
  }
  trustManager = {
    stores = [
      { type = "JKS", path = "/home/agoraelections/keystore.jks", password = "{{ config.agora_elections.keystore_pass }}" }
    ]
  }
}

# memcached
ehcacheplugin=disabled
memcached.host="127.0.0.1:11211"
logger.memcached=WARN
