db.default.url="jdbc:postgresql://{{ config.load_balancing.slave.master_hostname if not config.load_balancing.is_master else 'localhost' }}:5432/agora_elections"
db.default.driver="org.postgresql.Driver"
db.default.user=agora_elections
db.default.pass={{config.agora_elections.db_password}}

app.datastore.public="/home/agoraelections/datastore/public"
app.datastore.private="/home/agoraelections/datastore/private"
applyEvolutions.default=true

app.api.root="http://{{config.agora_elections.domain}}:{{config.agora_elections.port}}"
app.datastore.root="http://{{config.agora_elections.domain}}:{{config.agora_elections.port}}"
app.datastore.ssl_root="https://{{config.agora_elections.domain}}:{{config.agora_elections.ssl_port}}"

app.api.max_revotes={{config.agora_elections.max_revotes}}
app.partial-tallies=false

# agora-results can specify the pipelines whitelist
app.agoraResults.pipesWhitelist="/home/agoraelections/agora-elections/conf/pipes_whitelist"

# Generic election related constraints that apply to multiple parts of
# the deployment, for example the same limit might apply to authapi,
#agora-gui and agora-elections
election.limits {
  # maximum number of questions allowed in an election
  maxNumQuestions={{config.election_limits.max_num_questions}},

  # maximum number of allowed possible answers in a question
  maxNumAnswers={{config.election_limits.max_num_answers}},

  # maximum size in characters of long strings like url titles
  maxShortStringLength={{config.election_limits.max_short_string_length}},

  # maximum size in characters of long strings like question description
  maxLongStringLength={{config.election_limits.max_long_string_length}}
}

app.authorities = {
{% for auth in config.authorities %}

  {{ auth.id }} = {
    name = "{{ auth.name }}",
    description = "{{ auth.description }}",
    url = "{{ auth.url }}",
    image = "{{ auth.image }}"
  }{% if not loop.last %},{% endif %}
{% endfor %}

}

app.eopeers.dir=/etc/eopeers/

booth.auth.secret={{config.agora_elections.shared_secret}}
booth.auth.expiry={{config.agora_elections.expiry}}

ws.ssl {
  loose.disableHostnameVerification=true
  keyManager = {
    stores = [
      { type = "JKS", path = "/home/agoraelections/keystore.jks", password = "{{ config.agora_elections.keystore_pass }}" }
    ]
  }
  trustManager = {
    stores = [
      { type = "JKS", path = "/home/agoraelections/keystore.jks", password = "{{ config.agora_elections.keystore_pass }}" }
    ]
  }
}

# memcached
ehcacheplugin=disabled
memcached.host="127.0.0.1:11211"
logger.memcached=WARN
